{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNhpsWluQkTTzD4D4iGxvC5"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "8822f266ffcc400dbd7cfde67cee8ac9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c1ad6e8110c6446e9d73d6339760edc2",
              "IPY_MODEL_95d2e3c0033543adb4908849e0eea559",
              "IPY_MODEL_98a8e3e25d0e4c0bb321cc3161325ebc"
            ],
            "layout": "IPY_MODEL_369ce190c3ba49d58338a09dd4c8ab23"
          }
        },
        "c1ad6e8110c6446e9d73d6339760edc2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d703c90005c243b48e0e2cfc0df4f833",
            "placeholder": "​",
            "style": "IPY_MODEL_b2c5d2ec8c204e1088e75421cfcda050",
            "value": "100%"
          }
        },
        "95d2e3c0033543adb4908849e0eea559": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3a6d0fa245c942dab30674e836dde77f",
            "max": 3,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_66db7dae74b34695aeec4059f78651b6",
            "value": 3
          }
        },
        "98a8e3e25d0e4c0bb321cc3161325ebc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_99e062ee5a1d4165add3af067d5e0630",
            "placeholder": "​",
            "style": "IPY_MODEL_1974907f6e15422ab284fdf27243123c",
            "value": " 3/3 [00:30&lt;00:00, 10.12s/it]"
          }
        },
        "369ce190c3ba49d58338a09dd4c8ab23": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d703c90005c243b48e0e2cfc0df4f833": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b2c5d2ec8c204e1088e75421cfcda050": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3a6d0fa245c942dab30674e836dde77f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "66db7dae74b34695aeec4059f78651b6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "99e062ee5a1d4165add3af067d5e0630": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1974907f6e15422ab284fdf27243123c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f6ef772d420f4dae9db83cde21bf8339": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d4567def838b44e3b9fab05f9dbd43e4",
              "IPY_MODEL_4ea6ebf9138948489573c6f288ea5292",
              "IPY_MODEL_c94aab2487634df4b674b0dc7e3b0a46"
            ],
            "layout": "IPY_MODEL_f2afd211f94f478f9e78fa93a733fab7"
          }
        },
        "d4567def838b44e3b9fab05f9dbd43e4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f0e6557e744a4b68bfdadd134999b967",
            "placeholder": "​",
            "style": "IPY_MODEL_b5db5271cc304122ad9f13730312793b",
            "value": "Making Predictions: 100%"
          }
        },
        "4ea6ebf9138948489573c6f288ea5292": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_daa248ca08b449e1bf539589e75eabd4",
            "max": 313,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e5e0d5bc044f485796b0aed19eba00f1",
            "value": 313
          }
        },
        "c94aab2487634df4b674b0dc7e3b0a46": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6a2d335c9b954279a8b0a1b8ddd8c3a1",
            "placeholder": "​",
            "style": "IPY_MODEL_de2cb3b30e394b308f474f2f3edfae67",
            "value": " 313/313 [00:01&lt;00:00, 223.30it/s]"
          }
        },
        "f2afd211f94f478f9e78fa93a733fab7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f0e6557e744a4b68bfdadd134999b967": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b5db5271cc304122ad9f13730312793b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "daa248ca08b449e1bf539589e75eabd4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e5e0d5bc044f485796b0aed19eba00f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "6a2d335c9b954279a8b0a1b8ddd8c3a1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "de2cb3b30e394b308f474f2f3edfae67": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vQz328Nj7vuQ",
        "outputId": "cca2bd66-2dfe-4d4f-90c2-6ca5d0cb6b08"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'learnpytorch'...\n",
            "remote: Enumerating objects: 32, done.\u001b[K\n",
            "remote: Counting objects: 100% (32/32), done.\u001b[K\n",
            "remote: Compressing objects: 100% (31/31), done.\u001b[K\n",
            "remote: Total 32 (delta 12), reused 0 (delta 0), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (32/32), 962.26 KiB | 6.73 MiB/s, done.\n",
            "Resolving deltas: 100% (12/12), done.\n",
            "/content/learnpytorch\n"
          ]
        }
      ],
      "source": [
        "!git clone https://github.com/ubermenchh/learnpytorch.git\n",
        "%cd learnpytorch"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import torch\n",
        "from torch import nn\n",
        "import torchvision\n",
        "from torchvision import datasets\n",
        "import torchvision.transforms as transforms\n",
        "from torchvision.transforms import ToTensor"
      ],
      "metadata": {
        "id": "QCtDd8YM9bv-"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_data = datasets.FashionMNIST(root='data', train=True, download=True, transform=ToTensor(), target_transform=None)\n",
        "test_data = datasets.FashionMNIST(root='data', train=False, download=True, transform=ToTensor())"
      ],
      "metadata": {
        "id": "CAKT0wkr9zT6"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_data), len(test_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wrek-YVC-cRE",
        "outputId": "f13f6b2a-2f06-4f14-c3a6-b43e9d6b34f4"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 10000)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "classes = train_data.classes\n",
        "classes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V5q8HF2N-idb",
        "outputId": "994c8a42-f5d3-46de-c035-c8ae3028de81"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['T-shirt/top',\n",
              " 'Trouser',\n",
              " 'Pullover',\n",
              " 'Dress',\n",
              " 'Coat',\n",
              " 'Sandal',\n",
              " 'Shirt',\n",
              " 'Sneaker',\n",
              " 'Bag',\n",
              " 'Ankle boot']"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "image, label = train_data[0]\n",
        "plt.imshow(image.squeeze())\n",
        "plt.title(label)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "M_7yD-UG-0wk",
        "outputId": "79082d10-b9bf-4b18-8d1c-98c72f0a7c49"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, '9')"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.imshow(image.squeeze(), cmap='gray')\n",
        "plt.title(classes[label]);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "sRJqFNew_Dna",
        "outputId": "a4be98e1-cd32-4209-b2df-09b5a1898ee7"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure(figsize=(10, 10))\n",
        "rows, cols = 4, 4\n",
        "for i in range(1, rows * cols + 1):\n",
        "    random_idx = torch.randint(0, len(train_data), size=[1]).item()\n",
        "    img, label = train_data[random_idx]\n",
        "    fig.add_subplot(rows, cols, i)\n",
        "    plt.imshow(img.squeeze(), cmap='gray')\n",
        "    plt.title(classes[label]);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 853
        },
        "id": "XSP-4U-X_Lgh",
        "outputId": "454eb092-de0d-4777-d692-43b10ac133d7"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torch.utils.data import DataLoader\n",
        "\n",
        "BATCH_SIZE = 32\n",
        "\n",
        "train_dataloader = DataLoader(train_data, batch_size=BATCH_SIZE, shuffle=True)\n",
        "test_dataloader = DataLoader(test_data, batch_size=BATCH_SIZE, shuffle=False)"
      ],
      "metadata": {
        "id": "Onxu38i4AXb9"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "len(train_dataloader), len(test_dataloader)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_8JTgWciA-i9",
        "outputId": "a2039372-89c9-4bf6-bd7e-9ceae11fc349"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1875, 313)"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(1875*32, 313*32)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TwEb0rx0BBKk",
        "outputId": "5959b999-6a26-428c-ac42-4a1756fdf680"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "60000 10016\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_features_batch, train_labels_batch = next(iter(train_dataloader))\n",
        "train_features_batch.shape, train_labels_batch.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TgvCw73rBFPS",
        "outputId": "5b3f0a90-5e54-4ae9-d535-d5c0f0caca24"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(torch.Size([32, 1, 28, 28]), torch.Size([32]))"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random_idx = torch.randint(0, len(train_features_batch), size=[1]).item()\n",
        "img, label = train_features_batch[random_idx], train_labels_batch[random_idx]\n",
        "plt.imshow(img.squeeze(), cmap='gray')\n",
        "plt.title(classes[label])\n",
        "plt.axis('Off');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "UeI0JKA_BnXk",
        "outputId": "7cd7ddcc-62c4-42d6-ea01-6027104d740b"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGbCAYAAAAr/4yjAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWc0lEQVR4nO3daYydZfk/8Ot0prN0g6GrhUqxLC1LWAopqNgCAVlaeWGBGDWUgOILghASEvUFMVETBJEomhZjDKmTlCUV0IgiQhDhRYUE1zTS0BrWFgS6zLTTzszzf2G48qtFOvf9Z4aKn0/SNOfM8z33c855Zr6925mrraZpmgCAiBj3fp8AAAcOpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJKXAf50VK1bEpEmT9nvckiVLYsmSJe/ZukuWLInjjz/+PXs8OBApBcbED3/4w2i1WrFo0aL3+1T+K33rW9+K+++///0+Df4HKAXGRG9vb8ydOzfWrVsXGzZseL9P57+OUmCsKAVG3caNG+Opp56K2267LaZPnx69vb3v9ykB/4FSYNT19vZGT09PXHTRRbF8+fJ3LIVNmzZFq9WKW2+9Ne68886YN29edHZ2xmmnnRZ/+MMf9rvGs88+G9OnT48lS5bEjh07/uNxAwMDcdNNN8WRRx4ZnZ2dMWfOnLjxxhtjYGBgxM/nmWeeiY9+9KPR3d0dRxxxRKxcuXKfY7Zs2RJXXnllzJw5M7q6uuLEE0+Mu+66a5/j+vr64oYbbog5c+ZEZ2dnHHPMMXHrrbfG/x1e3Gq1oq+vL+66665otVrRarVixYoVIz5fKNLAKJs/f35z5ZVXNk3TNL/73e+aiGjWrVu31zEbN25sIqI5+eSTmyOPPLK5+eabm29/+9vNtGnTmsMOO6zZvXt3Hnv55Zc3EydOzNvr1q1renp6mnPPPbfp7+/P+xcvXtwsXrw4bw8NDTXnnXdeM2HChOa6665rVq1a1VxzzTVNe3t7c/HFF+/3eSxevLiZPXt2M2PGjOaaa65pvve97zUf//jHm4hofvzjH+dx/f39zYIFC5rx48c3119/ffO9732vOfPMM5uIaG6//fY8bnh4uDn77LObVqvVXHXVVc0dd9zRLFu2rImI5rrrrsvjVq9e3XR2djZnnnlms3r16mb16tXNU089tf8XHiooBUbV008/3URE85vf/KZpmn99ITzssMOaL3/5y3sd93YpTJ06tXnjjTfy/gceeKCJiObnP/953vd/S+H3v/99M2XKlOaiiy5qdu3atddj/nsprF69uhk3blzzxBNP7HXcypUrm4honnzyyXd9LosXL24iovnOd76T9w0MDDQnnXRSM2PGjCyu22+/vYmI5qc//Wket3v37uaMM85oJk2a1Gzbtq1pmqa5//77m4hovvGNb+y1zvLly5tWq9Vs2LAh75s4cWJz+eWXv+v5wXvBXx8xqnp7e2PmzJlx1llnRcS//irksssuizVr1sTQ0NA+x1922WXR09OTt88888yIiHj++ef3Ofaxxx6LT37yk3HOOefE2rVro7Oz813P5d57740FCxbE/Pnz4/XXX89fZ599dj7e/rS3t8fVV1+dtzs6OuLqq6+OLVu2xDPPPBMREb/85S9j1qxZ8ZnPfCaPGz9+fFx77bWxY8eOePzxx/O4tra2uPbaa/da44YbboimaeKhhx7a7/nAe00pMGqGhoZizZo1cdZZZ8XGjRtjw4YNsWHDhli0aFFs3rw5fvvb3+6T+fCHP7zX7bcL4s0339zr/l27dsVFF10UJ598ctxzzz3R0dGx3/N57rnn4q9//WtMnz59r19HH310RPzr3wH2Z/bs2TFx4sS97ns7v2nTpoiI+Mc//hFHHXVUjBu396fXggUL8uNv/z579uyYPHnyux4HY6n9/T4BPrgeffTReOWVV2LNmjWxZs2afT7e29sb55133l73tbW1veNjNf/2v8Z2dnbGhRdeGA888ED86le/iqVLl+73fIaHh+OEE06I22677R0/PmfOnP0+BnzQKQVGTW9vb8yYMSN+8IMf7POxtWvXxs9+9rNYuXJldHd3Fz92q9WK3t7euPjii+OSSy6Jhx56aL8/vTxv3rz44x//GOecc060Wq3iNSMiXn755ejr69trt/D3v/89IiLmzp0bERGHH354/OlPf4rh4eG9dgvr16/Pj7/9+yOPPBLbt2/fa7fw78e9/XxhLPjrI0bFzp07Y+3atbF06dJYvnz5Pr+uueaa2L59ezz44IPVa3R0dMTatWvjtNNOi2XLlsW6deve9fhLL700XnrppfjRj370jufb19e33zUHBwdj1apVeXv37t2xatWqmD59eixcuDAiIi688MJ49dVX4+67794r9/3vfz8mTZoUixcvzuOGhobijjvu2GuN7373u9FqteKCCy7I+yZOnBhvvfXWfs8P/n/ZKTAqHnzwwdi+fXt86lOfesePn3766fmDbJdddln1Ot3d3fGLX/wizj777Ljgggvi8ccf/4/ziT7/+c/HPffcE1/60pfisccei4997GMxNDQU69evj3vuuSd+/etfx6mnnvqu682ePTtuvvnm2LRpUxx99NFx9913x7PPPht33nlnjB8/PiIivvjFL8aqVatixYoV8cwzz8TcuXPjvvvuiyeffDJuv/323BUsW7YszjrrrPja174WmzZtihNPPDEefvjheOCBB+K6666LefPm5boLFy6MRx55JG677baYPXt2HHHEEUaGMDre729/4oNp2bJlTVdXV9PX1/cfj1mxYkUzfvz45vXXX89vSb3lllv2OS4imptuuilv//vPKTRN07z++uvNscce28yaNat57rnnmqbZ91tSm+Zf3xp68803N8cdd1zT2dnZ9PT0NAsXLmy+/vWvN1u3bn3X57R48eLmuOOOa55++unmjDPOaLq6uprDDz+8ueOOO/Y5dvPmzc0VV1zRTJs2reno6GhOOOGE5ic/+ck+x23fvr25/vrrm9mzZzfjx49vjjrqqOaWW25phoeH9zpu/fr1zSc+8Ymmu7u7iQjfnsqoaTXNv/0LHgD/s/ybAgBJKQCQlAIASSkAkJQCAEkpAJBG/MNrfswe4L/bSH4CwU4BgKQUAEhKAYCkFABISgGApBQASEoBgKQUAEhKAYCkFABISgGApBQASCMeiAfsq729/FOo9r9FHx4eHrO1iLjkkkuKM/fee+8onMk7GzdudP5Mb6cAQFIKACSlAEBSCgAkpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJAPx+EBqtVrFmZrhcYODg8WZsVQzsG9oaKg4U/Pa1bxHEXWD4GqeU81AvKlTpxZnIiJWrlxZnGlra6taa3/sFABISgGApBQASEoBgKQUAEhKAYCkFABISgGApBQASEoBgKQUAEhKAYCkFABIpqTygVQztbPG/Pnzx2SdiIj169cXZw7kKa6171HNxNMad955Z3Hm4osvHoUzeWd79uwZlce1UwAgKQUAklIAICkFAJJSACApBQCSUgAgKQUAklIAICkFAJJSACApBQCSgXgc8Nra2oozNUPTjj/++OLMV7/61eJMT09PcSYi4q233irO3HjjjcWZF154oThzoLviiiuKM4sWLSrOdHV1FWcONHYKACSlAEBSCgAkpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJKUAQDIQjwNeq9Uak3XmzJlTnBkYGCjObNy4sTgTETF58uTizKOPPlqcqTm/N954ozizcOHC4kxExK5du4ozfX19xZmaoYrbt28vzhxo7BQASEoBgKQUAEhKAYCkFABISgGApBQASEoBgKQUAEhKAYCkFABISgGAZCAeB7yawWQ1TjrppOLM8PBwcWb8+PHFmYiInTt3FmeeeOKJ4kzNYMCPfOQjxZlXXnmlOBMRsXv37uJMf39/caazs3NMMhERBx10UHFm69atVWvtj50CAEkpAJCUAgBJKQCQlAIASSkAkJQCAEkpAJCUAgBJKQCQlAIASSkAkAzEI1qtVnGmaZrizLhxdX8GqRk6V6NmIF7NULe2trbiTETE5MmTizM9PT3Fmfb28i8LfX19Y7JORMTg4GBxZteuXcWZmmu8dthh7TUxGuwUAEhKAYCkFABISgGApBQASEoBgKQUAEhKAYCkFABISgGApBQASEoBgKQUAEimpDJmE0/HckpqR0dHcWbKlCnFmS1bthRnaidizpo1qzhTM1l1YGCgOFMzHXRoaKg4E1H3+tU8p4kTJ47JOhER/f39VbnRYKcAQFIKACSlAEBSCgAkpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJAPxiFarVZypGaJXk6l1yimnFGcGBweLM319fcWZqVOnFmciIrq7u4szNedXM3CuJlMz6DCibvjeQQcdVLVWqUmTJlXlpk2bVpx58cUXq9baHzsFAJJSACApBQCSUgAgKQUAklIAICkFAJJSACApBQCSUgAgKQUAklIAIBmIR5Wa4XZDQ0OjcCbv7Pzzzy/O1AyPmzJlyphkIiI6OjqKMzXD42qM5Xvb399fnBmrgX21r8PSpUuLMytXrqxaa3/sFABISgGApBQASEoBgKQUAEhKAYCkFABISgGApBQASEoBgKQUAEhKAYDUakY42azVao32ufAeqHmfxuq9rRkwFlE3CK63t7c4s23btuJMzaC1np6e4kxExIwZM4oz48aV/7lv9+7dxZka3d3dVbnXXnutODNWAxxrroeIiEMOOaQ4c/rppxdnRvI62CkAkJQCAEkpAJCUAgBJKQCQlAIASSkAkJQCAEkpAJCUAgBJKQCQlAIASSkAkNrf7xPgvVUzDbImUzsNssYXvvCF4syUKVOKM7t27SrOdHV1FWdqpr5GRPT3949Jpr29/MtCzTVUc2619uzZU5ypmTA7ODhYnImImDVrVnFm7ty5VWvtj50CAEkpAJCUAgBJKQCQlAIASSkAkJQCAEkpAJCUAgBJKQCQlAIASSkAkAzEo2pA2+7du4szkydPLs5ERJx77rnFmRdffLE4M2HChOLM8PBwcaZWd3d3caZmuF3Nc6oZJlgzRK82VzMQr+b1rnkdIiK2b99enDnuuOOq1tofOwUAklIAICkFAJJSACApBQCSUgAgKQUAklIAICkFAJJSACApBQCSUgAgGYj3ATNuXHnP1wy3q3HjjTdW5dra2oozrVarOFMzzKzm9e7q6irORES89tprxZmaQXA1r11NZvz48cWZWjXX0ODg4JisExHR399fnKkdMLk/dgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBA+p8eiFczxKtpmuJMzdC02sFaNQPQaixdurQ4s2TJkqq1/vKXvxRnOjo6ijM1r/mkSZOKMzXXQ0TEwMBAVa5UzaC14eHh4szQ0FBxpjZX897WDIpsb6/7klozJHHr1q1Va+2PnQIASSkAkJQCAEkpAJCUAgBJKQCQlAIASSkAkJQCAEkpAJCUAgBJKQCQRjy9qWZ43FgOgqsZXlWz1uDgYHGmZlhYTabWiSeeWJz53Oc+V5z585//XJyJqBsyVjMQb8KECWOyTu013t3dXZypGZBYM3BuLAfi1aw1Vl+/aq6HiLrBigbiATDqlAIASSkAkJQCAEkpAJCUAgBJKQCQlAIASSkAkJQCAEkpAJCUAgBJKQCQRjx+smma4gevmYJYOzmxRs3E07Fy0kknVeWWLVtWnDn66KOLM9u2bSvOdHZ2Fmci6qaK1ky4rLkeatbp6uoqzkTUTTydOHFicaZm4vDOnTuLMzWTQSPqntNYqbkeIiKmTZtWnDElFYBRpxQASEoBgKQUAEhKAYCkFABISgGApBQASEoBgKQUAEhKAYCkFABIIx6IV+OYY44pzixfvrxqrZ6enqpcqZpBcIceemhx5pBDDinORES8+eabxZmXXnqpODNnzpziTO2wsJpcR0fHmKzT3j6qn0J7qRkgt2PHjuLM8PBwcWbevHnFmdrBgDUD+2qe01gO9Ozv7y/OvPzyy1Vr7Y+dAgBJKQCQlAIASSkAkJQCAEkpAJCUAgBJKQCQlAIASSkAkJQCAEkpAJBaTdM0Izqw1Sp+8Icffrg4s2fPnuJMRMTmzZuLM52dncWZN954ozgzwpd4LzWvd0TdULcpU6aMyTo1Q+oiIsaPH1+c6e7uLs60tbUVZwYHB4sztUPTtm/fXpw59thjizPz588vzrz66qvFmZrPpYi6gXg112vt52CNCRMmFGdq3tuRDAa0UwAgKQUAklIAICkFAJJSACApBQCSUgAgKQUAklIAICkFAJJSACApBQBS+0gPPPXUU4sf/M033yzOjGRg0zupGZpWM1irZohezQC0mkFrEXXD7WqGcdUMC6sZShZRN1Cw5vWrWad2gGONmgFoJ5xwQnFmwYIFxZnLL7+8OHP11VcXZyIinnvuueJMzfVacz20t4/4S+peBgYGijM15zcSdgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBAGvH0pprBWjNnzizObN26tTgTEdHV1VWc2bJlS9VapWqG1NUM64uoGzpXM7CvZgBh7UC8tra24kx3d3dxpmbAWM25zZkzpzgTEXHooYcWZ+bNm1ecef7554sz06dPL87UXEO1at7bmuGcNddDRMQ///nPqtxosFMAICkFAJJSACApBQCSUgAgKQUAklIAICkFAJJSACApBQCSUgAgKQUAklIAII14Sur27duLH/xDH/pQcWby5MnFmYi66aqzZs2qWqtUZ2dncWbHjh1Va+3atas4MzAwUJypmQbZ3j7iy20vYzVNs2aSZs3k0pr3KCJixowZxZmdO3dWrVWqZtLu5s2bq9aquR5arVZxpmZKau0k4BdeeKEqNxrsFABISgGApBQASEoBgKQUAEhKAYCkFABISgGApBQASEoBgKQUAEhKAYA04gll9913X/GDd3d3F2cuvfTS4kxExNy5c4szHR0dxZmawXs1g7UOPvjg4kxExODg4Jhkap5TTSaibvhejZqBc3v27CnOnH/++cWZiLrhdjUD2mrep7G67mpzNcMYx/Ia/9vf/laVGw12CgAkpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJKUAQFIKACSlAEAqnxJVYPXq1WOSiYhYtGhRcebTn/50ceaUU04pzsycObM4U6uzs3NM1hkYGCjODA0NVa1VMwBtypQpxZmaYYef/exnizOvvvpqceZAV/Pe1n5e1Aydqxl+WXONT548uTgTEfH8889X5UaDnQIASSkAkJQCAEkpAJCUAgBJKQCQlAIASSkAkJQCAEkpAJCUAgBJKQCQWk3TNCM5cNy48v4Y4UN/4E2dOrU4c8QRR1SttXTp0uJMzfkdfPDBxZnDDjusOBMRsXPnzuLMK6+8Upy56qqrijMH+jXearWKMzXP6Stf+UpxpnZ4XM31WpOpeR22bdtWnImI+OY3v1mcqRmiN5LnZKcAQFIKACSlAEBSCgAkpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJKUAQBrxlNSaaYs1atepyQ0PD1etBW8bqymktQ7082NsmZIKQBGlAEBSCgAkpQBAUgoAJKUAQFIKACSlAEBSCgAkpQBAUgoAJKUAQDrgBuIBMDoMxAOgiFIAICkFAJJSACApBQCSUgAgKQUAklIAICkFAJJSACApBQCSUgAgtY/0wBHOzQPgv5idAgBJKQCQlAIASSkAkJQCAEkpAJCUAgBJKQCQlAIA6f8BKv6cDDz5vqEAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "flatten_model = nn.Flatten()\n",
        "x = train_features_batch[0]\n",
        "output = flatten_model(x)"
      ],
      "metadata": {
        "id": "6wFRi2a5CSBe"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x.shape, output.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sz7Tz01NCwbB",
        "outputId": "d778eb5c-711f-4d0d-8e58-d5182cec8d65"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(torch.Size([1, 28, 28]), torch.Size([1, 784]))"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "28*28 # 1x28x28 --> 1x784"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1hfRCKyBCxy6",
        "outputId": "d0aae892-db99-4ce8-cef5-92d95b41fc5b"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "784"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class FashionMNISTModelV0(nn.Module):\n",
        "    def __init__(self, input_shape, output_shape, hidden_units):\n",
        "        super().__init__()\n",
        "        self.layers = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(in_features=input_shape, out_features=hidden_units),\n",
        "            nn.Linear(in_features=hidden_units, out_features=output_shape)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.layers(x)"
      ],
      "metadata": {
        "id": "O1ongLz7C8vj"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model0 = FashionMNISTModelV0(input_shape=784, output_shape=len(classes), hidden_units=10)\n",
        "model0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "se4ux4fPDkib",
        "outputId": "bbf7ecae-afdb-4af6-f3a1-6205d41eb752"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FashionMNISTModelV0(\n",
              "  (layers): Sequential(\n",
              "    (0): Flatten(start_dim=1, end_dim=-1)\n",
              "    (1): Linear(in_features=784, out_features=10, bias=True)\n",
              "    (2): Linear(in_features=10, out_features=10, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from helper_functions import accuracy_fn\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.SGD(params=model0.parameters(), lr=0.03)"
      ],
      "metadata": {
        "id": "97WRJUeeDyMk"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tqdm.auto import tqdm\n",
        "\n",
        "epochs = 3\n",
        "\n",
        "for epoch in tqdm(range(epochs)):\n",
        "    print(f'Epoch {epoch} ------------------------------------------')\n",
        "    train_loss = 0\n",
        "    for batch, (X, y) in enumerate(train_dataloader):\n",
        "        model0.train()\n",
        "        y_pred = model0(X)\n",
        "        loss = loss_fn(y_pred, y)\n",
        "        train_loss += loss\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        if batch % 400 == 0:\n",
        "            print(f\"Looked at {batch * len(X)} samples so far......\")\n",
        "\n",
        "    train_loss /= len(train_dataloader)\n",
        "\n",
        "    test_loss, test_acc = 0, 0\n",
        "    model0.eval()\n",
        "    with torch.inference_mode():\n",
        "        for X, y in test_dataloader:\n",
        "            test_pred = model0(X)\n",
        "            test_loss += loss_fn(test_pred, y)\n",
        "            test_acc += accuracy_fn(y_true=y, y_pred=test_pred.argmax(dim=1))\n",
        "\n",
        "        test_loss /= len(test_dataloader)\n",
        "        test_acc /= len(test_dataloader)\n",
        "\n",
        "    print(f\"\\nTrain Loss: {train_loss:.5f} | Test Loss: {test_loss:.5f} | Test Accuracy: {test_acc:.2f}%\\n\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 518,
          "referenced_widgets": [
            "8822f266ffcc400dbd7cfde67cee8ac9",
            "c1ad6e8110c6446e9d73d6339760edc2",
            "95d2e3c0033543adb4908849e0eea559",
            "98a8e3e25d0e4c0bb321cc3161325ebc",
            "369ce190c3ba49d58338a09dd4c8ab23",
            "d703c90005c243b48e0e2cfc0df4f833",
            "b2c5d2ec8c204e1088e75421cfcda050",
            "3a6d0fa245c942dab30674e836dde77f",
            "66db7dae74b34695aeec4059f78651b6",
            "99e062ee5a1d4165add3af067d5e0630",
            "1974907f6e15422ab284fdf27243123c"
          ]
        },
        "id": "oOE2ZRAJEWUs",
        "outputId": "de33c4bf-2d47-4bd8-b759-c400d543dc9c"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  0%|          | 0/3 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "8822f266ffcc400dbd7cfde67cee8ac9"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0 ------------------------------------------\n",
            "Looked at 0 samples so far......\n",
            "Looked at 12800 samples so far......\n",
            "Looked at 25600 samples so far......\n",
            "Looked at 38400 samples so far......\n",
            "Looked at 51200 samples so far......\n",
            "\n",
            "Train Loss: 0.48905 | Test Loss: 0.50204 | Test Accuracy: 82.39%\n",
            "\n",
            "Epoch 1 ------------------------------------------\n",
            "Looked at 0 samples so far......\n",
            "Looked at 12800 samples so far......\n",
            "Looked at 25600 samples so far......\n",
            "Looked at 38400 samples so far......\n",
            "Looked at 51200 samples so far......\n",
            "\n",
            "Train Loss: 0.45941 | Test Loss: 0.47519 | Test Accuracy: 83.50%\n",
            "\n",
            "Epoch 2 ------------------------------------------\n",
            "Looked at 0 samples so far......\n",
            "Looked at 12800 samples so far......\n",
            "Looked at 25600 samples so far......\n",
            "Looked at 38400 samples so far......\n",
            "Looked at 51200 samples so far......\n",
            "\n",
            "Train Loss: 0.44205 | Test Loss: 0.47232 | Test Accuracy: 83.54%\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def eval_model(model, dataloader, loss_fn, accuracy_fn):\n",
        "    acc, loss = 0, 0\n",
        "    model.eval()\n",
        "    with torch.inference_mode():\n",
        "        for X, y in dataloader:\n",
        "            pred = model(X)\n",
        "            loss += loss_fn(pred, y)\n",
        "            acc += accuracy_fn(y_true=y, y_pred=pred.argmax(dim=1))\n",
        "\n",
        "        loss /= len(dataloader)\n",
        "        acc /= len(dataloader)\n",
        "\n",
        "    return {'model_name': model.__class__.__name__, 'Loss': loss.item(), 'Accuracy': acc}"
      ],
      "metadata": {
        "id": "tctlSyx-GZQt"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model0_results = eval_model(model0, test_dataloader, loss_fn=loss_fn, accuracy_fn=accuracy_fn)\n",
        "model0_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ZCIjndBjO4a",
        "outputId": "934c49b4-42ec-4840-820e-0111e9262704"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'model_name': 'FashionMNISTModelV0',\n",
              " 'loss': 0.47232019901275635,\n",
              " 'accuracy': 83.53634185303514}"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
        "device"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "TIIMSzL8jXJx",
        "outputId": "e5e08d09-2bf4-4212-c3d4-4f68178ad4aa"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cuda'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class FashionMNISTModelV1(nn.Module):\n",
        "    def __init__(self, input_shape, output_shape, hidden_units):\n",
        "        super().__init__()\n",
        "        self.layers = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(in_features=input_shape, out_features=hidden_units),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(in_features=hidden_units, out_features=output_shape),\n",
        "            nn.ReLU()\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.layers(x)"
      ],
      "metadata": {
        "id": "QY6TxKQ4jbHL"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1 = FashionMNISTModelV1(input_shape=784, output_shape=len(classes), hidden_units=10).to(device)\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.SGD(params=model1.parameters(), lr=0.03)"
      ],
      "metadata": {
        "id": "qkX19DaqkQaD"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def train_step(model, dataloader, loss_fn, optimizer, accuracy_fn, device=device):\n",
        "    model.to(device)\n",
        "    train_loss, train_acc = 0, 0\n",
        "    for batch, (X, y) in enumerate(dataloader):\n",
        "        X, y = X.to(device), y.to(device)\n",
        "        pred = model(X)\n",
        "\n",
        "        loss = loss_fn(pred, y)\n",
        "        train_loss += loss\n",
        "\n",
        "        train_acc += accuracy_fn(y_true=y, y_pred=pred.argmax(dim=1))\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "    train_loss /= len(dataloader)\n",
        "    train_acc /= len(dataloader)\n",
        "\n",
        "    print(f\"Train Loss: {train_loss:.5f} | Train Accuracy: {train_acc:.2f}%\\n\")"
      ],
      "metadata": {
        "id": "_nt2Iz7kkoEb"
      },
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test_step(model, dataloader, loss_fn, accuracy_fn, device=device):\n",
        "    model.to(device)\n",
        "    test_loss, test_acc = 0, 0\n",
        "    with torch.inference_mode():\n",
        "        for (X, y) in dataloader:\n",
        "            X, y = X.to(device), y.to(device)\n",
        "            pred = model(X)\n",
        "\n",
        "            test_loss += loss_fn(pred, y)\n",
        "            test_acc += accuracy_fn(y_true=y, y_pred=pred.argmax(dim=1))\n",
        "\n",
        "        test_loss /= len(dataloader)\n",
        "        test_acc /= len(dataloader)\n",
        "\n",
        "    print(f\"Test Loss: {test_loss:.5f} | Test Accuracy: {test_acc:.2f}%\\n\")"
      ],
      "metadata": {
        "id": "LRL70YlFlyAC"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 3\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    print(f\"Epoch {epoch} ---------------------------------------------------------\")\n",
        "    train_step(model1, train_dataloader, loss_fn=loss_fn, optimizer=optimizer, accuracy_fn=accuracy_fn)\n",
        "    test_step(model1, test_dataloader, loss_fn=loss_fn, accuracy_fn=accuracy_fn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b0Ug_4aWmTKM",
        "outputId": "5575c082-87d4-46e6-e1a4-44add33f17e4"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0 ---------------------------------------------------------\n",
            "Train Loss: 0.78954 | Train Accuracy: 73.98%\n",
            "\n",
            "Test Loss: 0.82514 | Test Accuracy: 73.06%\n",
            "\n",
            "Epoch 1 ---------------------------------------------------------\n",
            "Train Loss: 0.78070 | Train Accuracy: 74.12%\n",
            "\n",
            "Test Loss: 0.80687 | Test Accuracy: 73.56%\n",
            "\n",
            "Epoch 2 ---------------------------------------------------------\n",
            "Train Loss: 0.77218 | Train Accuracy: 74.32%\n",
            "\n",
            "Test Loss: 0.79517 | Test Accuracy: 73.96%\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def eval_model(model, dataloader, loss_fn, accuracy_fn, device=device):\n",
        "    model.to(device)\n",
        "    model.eval()\n",
        "    loss, acc = 0, 0\n",
        "\n",
        "    with torch.inference_mode():\n",
        "        for (X, y) in dataloader:\n",
        "            X, y = X.to(device), y.to(device)\n",
        "            pred = model(X)\n",
        "            loss += loss_fn(pred, y)\n",
        "            acc += accuracy_fn(y_true=y, y_pred=pred.argmax(dim=1))\n",
        "\n",
        "        loss /= len(dataloader)\n",
        "        acc /= len(dataloader)\n",
        "\n",
        "    return {'model_name': model.__class__.__name__, 'loss': loss.item(), 'accuracy': acc}"
      ],
      "metadata": {
        "id": "IZBq53OGm5J9"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1_results = eval_model(model1, test_dataloader, loss_fn=loss_fn, accuracy_fn=accuracy_fn)\n",
        "model1_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f7JjK2spoMZn",
        "outputId": "5ae3e363-4f4b-4b12-8074-f4e4b536a93b"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'model_name': 'FashionMNISTModelV1',\n",
              " 'loss': 0.7951706647872925,\n",
              " 'accuracy': 73.96166134185303}"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class FashionMNISTModelV2(nn.Module):\n",
        "    def __init__(self, input_shape, output_shape, hidden_units):\n",
        "        super().__init__()\n",
        "        self.block1 = nn.Sequential(\n",
        "            nn.Conv2d(in_channels=input_shape, out_channels=hidden_units, kernel_size=3, stride=1, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(in_channels=hidden_units, out_channels=hidden_units, kernel_size=3, stride=1, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        )\n",
        "        self.block2 = nn.Sequential(\n",
        "            nn.Conv2d(in_channels=hidden_units, out_channels=hidden_units, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.Conv2d(in_channels=hidden_units, out_channels=hidden_units, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        )\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(in_features=hidden_units*7*7, out_features=output_shape)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.classifier(self.block2(self.block1(x)))"
      ],
      "metadata": {
        "id": "rxfTtqK7oRTg"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model2 = FashionMNISTModelV2(input_shape=1, output_shape=len(classes), hidden_units=10).to(device)\n",
        "model2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oEg8_4Hir96L",
        "outputId": "1a0a8cf4-39f2-4c9a-f4d0-41268075c0f2"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "FashionMNISTModelV2(\n",
              "  (block1): Sequential(\n",
              "    (0): Conv2d(1, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): ReLU()\n",
              "    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (3): ReLU()\n",
              "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (block2): Sequential(\n",
              "    (0): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (1): ReLU()\n",
              "    (2): Conv2d(10, 10, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
              "    (3): ReLU()\n",
              "    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
              "  )\n",
              "  (classifier): Sequential(\n",
              "    (0): Flatten(start_dim=1, end_dim=-1)\n",
              "    (1): Linear(in_features=490, out_features=10, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss_fn = nn.CrossEntropyLoss()\n",
        "optimizer = torch.optim.SGD(params=model2.parameters(), lr=0.03)"
      ],
      "metadata": {
        "id": "lJ6WOGybsQBf"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "epochs = 3\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    print(f\"Epoch {epoch} -------------------------------------------\")\n",
        "    train_step(model2, train_dataloader, loss_fn=loss_fn, optimizer=optimizer, accuracy_fn=accuracy_fn)\n",
        "    test_step(model2, test_dataloader, loss_fn=loss_fn, accuracy_fn=accuracy_fn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kYUDgRg1uVlr",
        "outputId": "9ee3073c-7be8-406a-cf78-6bd2c45ca576"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0 -------------------------------------------\n",
            "Train Loss: 0.77598 | Train Accuracy: 71.82%\n",
            "\n",
            "Test Loss: 0.46596 | Test Accuracy: 83.54%\n",
            "\n",
            "Epoch 1 -------------------------------------------\n",
            "Train Loss: 0.41900 | Train Accuracy: 84.96%\n",
            "\n",
            "Test Loss: 0.40663 | Test Accuracy: 85.68%\n",
            "\n",
            "Epoch 2 -------------------------------------------\n",
            "Train Loss: 0.36985 | Train Accuracy: 86.63%\n",
            "\n",
            "Test Loss: 0.38017 | Test Accuracy: 86.35%\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model2_results = eval_model(model2, test_dataloader, loss_fn=loss_fn, accuracy_fn=accuracy_fn)\n",
        "model2_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bRvnZ2CTuu-h",
        "outputId": "8deb2562-184e-4bc4-cc70-5d28959042eb"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'model_name': 'FashionMNISTModelV2',\n",
              " 'loss': 0.3801739811897278,\n",
              " 'accuracy': 86.35183706070288}"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "compare_results = pd.DataFrame([model0_results, model1_results, model2_results])\n",
        "compare_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "_ciUkst4vGxT",
        "outputId": "a1587ee8-13af-481e-9a6d-4c77e84d6d65"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            model_name      loss   accuracy\n",
              "0  FashionMNISTModelV0  0.472320  83.536342\n",
              "1  FashionMNISTModelV1  0.795171  73.961661\n",
              "2  FashionMNISTModelV2  0.380174  86.351837"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-734f7e4e-879c-4ef5-9e75-995eeeee8094\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>model_name</th>\n",
              "      <th>loss</th>\n",
              "      <th>accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>FashionMNISTModelV0</td>\n",
              "      <td>0.472320</td>\n",
              "      <td>83.536342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>FashionMNISTModelV1</td>\n",
              "      <td>0.795171</td>\n",
              "      <td>73.961661</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>FashionMNISTModelV2</td>\n",
              "      <td>0.380174</td>\n",
              "      <td>86.351837</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-734f7e4e-879c-4ef5-9e75-995eeeee8094')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-2e481450-3112-48b7-9bb8-05e413a763f8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2e481450-3112-48b7-9bb8-05e413a763f8')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-2e481450-3112-48b7-9bb8-05e413a763f8 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-734f7e4e-879c-4ef5-9e75-995eeeee8094 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-734f7e4e-879c-4ef5-9e75-995eeeee8094');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def make_preds(model, data, device=device):\n",
        "    pred_probs = []\n",
        "    model.eval()\n",
        "\n",
        "    with torch.inference_mode():\n",
        "        for sample in data:\n",
        "            sample = torch.unsqueeze(sample, dim=0).to(device)\n",
        "            pred_logits = model(sample)\n",
        "            pred_prob = torch.softmax(pred_logits.squeeze(), dim=0)\n",
        "            pred_probs.append(pred_prob.cpu())\n",
        "\n",
        "    return torch.stack(pred_probs)"
      ],
      "metadata": {
        "id": "oU8U86BpvT13"
      },
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "test_samples, test_labels = [], []\n",
        "\n",
        "for sample, label in random.sample(list(test_data), k=9):\n",
        "    test_samples.append(sample)\n",
        "    test_labels.append(label)"
      ],
      "metadata": {
        "id": "xPD8jasQ0LWD"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_samples[0].shape, test_labels[0], classes[test_labels[0]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JCnN-q8P03l5",
        "outputId": "9d7f9694-10ae-4080-a81a-6098f784ed5f"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(torch.Size([1, 28, 28]), 5, 'Sandal')"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred_probs = make_preds(model2, test_samples)\n",
        "pred_probs[:2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WyZLByLF1APV",
        "outputId": "9fd42952-32e7-474b-bc18-fc7f62c27675"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[3.0133e-06, 8.3801e-08, 5.5790e-07, 8.0115e-07, 1.0853e-06, 9.9788e-01,\n",
              "         3.8615e-05, 8.0899e-04, 1.2206e-03, 4.9572e-05],\n",
              "        [5.1510e-08, 8.5196e-10, 2.5114e-08, 3.7231e-09, 2.1579e-08, 1.2833e-03,\n",
              "         2.3227e-06, 1.8034e-05, 1.2043e-05, 9.9868e-01]])"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred_classes = pred_probs.argmax(dim=1)\n",
        "pred_classes, test_labels"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "27KouNtk1Ir6",
        "outputId": "eca13502-20ba-42d9-8996-40466090f294"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([5, 9, 0, 8, 7, 0, 6, 4, 6]), [5, 9, 0, 8, 7, 0, 0, 4, 6])"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(9,9))\n",
        "nrows, ncols = 3, 3\n",
        "\n",
        "for i, sample in enumerate(test_samples):\n",
        "    plt.subplot(nrows, ncols, i+1)\n",
        "    plt.imshow(sample.squeeze(), cmap='gray')\n",
        "    pred_label = classes[pred_classes[i]]\n",
        "    truth_label = classes[test_labels[i]]\n",
        "    title_text = f\"Pred: {pred_label} | Truth: {truth_label}\"\n",
        "\n",
        "    if pred_label == truth_label:\n",
        "        plt.title(title_text, fontsize=10, c='g')\n",
        "    else:\n",
        "        plt.title(title_text, fontsize=10, c='r')\n",
        "    plt.axis('Off');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 749
        },
        "id": "0kajqUtb1xVJ",
        "outputId": "c66e431f-9545-4bd7-a8e3-6d5bf77c638a"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x900 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tqdm.auto import tqdm\n",
        "\n",
        "y_preds = []\n",
        "model2.eval()\n",
        "\n",
        "with torch.inference_mode():\n",
        "    for X, y in tqdm(test_dataloader, desc='Making Predictions'):\n",
        "        X, y = X.to(device), y.to(device)\n",
        "        y_logits = model2(X)\n",
        "        y_pred = torch.softmax(y_logits, dim=1).argmax(dim=1)\n",
        "        y_preds.append(y_pred.cpu())\n",
        "y_pred_tensor = torch.cat(y_preds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49,
          "referenced_widgets": [
            "f6ef772d420f4dae9db83cde21bf8339",
            "d4567def838b44e3b9fab05f9dbd43e4",
            "4ea6ebf9138948489573c6f288ea5292",
            "c94aab2487634df4b674b0dc7e3b0a46",
            "f2afd211f94f478f9e78fa93a733fab7",
            "f0e6557e744a4b68bfdadd134999b967",
            "b5db5271cc304122ad9f13730312793b",
            "daa248ca08b449e1bf539589e75eabd4",
            "e5e0d5bc044f485796b0aed19eba00f1",
            "6a2d335c9b954279a8b0a1b8ddd8c3a1",
            "de2cb3b30e394b308f474f2f3edfae67"
          ]
        },
        "id": "hot9ayvK2199",
        "outputId": "fb40550e-b8bb-4029-e636-91e3d5e8e4d1"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Making Predictions:   0%|          | 0/313 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f6ef772d420f4dae9db83cde21bf8339"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q torchmetrics mlxtend"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oH0kR_863txB",
        "outputId": "5747906f-a6b8-4eea-8ecc-90fb62ddd643"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/729.2 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m81.9/729.2 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━━━━━━━━━━━\u001b[0m \u001b[32m491.5/729.2 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m729.2/729.2 kB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torchmetrics, mlxtend"
      ],
      "metadata": {
        "id": "f0tll8XN36Ac"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from torchmetrics import ConfusionMatrix\n",
        "from mlxtend.plotting import plot_confusion_matrix\n",
        "\n",
        "confmat = ConfusionMatrix(num_classes=len(classes), task='multiclass')\n",
        "confmat_tensor = confmat(preds=y_pred_tensor, target=test_data.targets)\n",
        "\n",
        "fig, ax = plot_confusion_matrix(conf_mat=confmat_tensor.numpy(), class_names=classes, figsize=(10, 7));"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 667
        },
        "id": "fOv6ANSi4GIO",
        "outputId": "ca77c376-e9fa-4dfa-eb09-b2178a5becc2"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pathlib import Path\n",
        "\n",
        "MODEL_PATH = Path('models')\n",
        "MODEL_PATH.mkdir(exist_ok=True, parents=True)\n",
        "\n",
        "MODEL_NAME = 'model2.pth'\n",
        "MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME\n",
        "\n",
        "print(f'Saving model to: {MODEL_SAVE_PATH}')\n",
        "torch.save(obj=model2.state_dict(), f=MODEL_SAVE_PATH)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ELHTq1eK4wMq",
        "outputId": "11f8a7b2-bf1f-4a71-c5aa-898a63368d66"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving model to: models/model2.pth\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loaded_model2 = FashionMNISTModelV2(input_shape=1, output_shape=10, hidden_units=10)\n",
        "\n",
        "loaded_model2.load_state_dict(torch.load(f=MODEL_SAVE_PATH))\n",
        "loaded_model2 = loaded_model2.to(device)"
      ],
      "metadata": {
        "id": "Rt-NbWVe5dlr"
      },
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "loaded_model2_results = eval_model(model=loaded_model2, dataloader=test_dataloader, loss_fn=loss_fn, accuracy_fn=accuracy_fn)\n",
        "loaded_model2_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "24iBODu76aeJ",
        "outputId": "2417483d-8f64-48ea-e830-17d62de131a8"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'model_name': 'FashionMNISTModelV2',\n",
              " 'loss': 0.3801739811897278,\n",
              " 'accuracy': 86.35183706070288}"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.isclose(torch.tensor(model2_results['loss']),\n",
        "              torch.tensor(loaded_model2_results['loss']),\n",
        "              atol=1e-08,\n",
        "              rtol=0.0001)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nCJHaaRl6_Pu",
        "outputId": "6c737fe2-c4d6-45fc-83d4-4a6579dd07ba"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor(True)"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CtXqwdSu7Xf0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}